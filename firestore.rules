rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users collection
    match /users/{userId} {
      // An authenticated user can update their own profile, or an admin can update any profile
      allow read, update: if (request.auth.uid == userId || isAdmin());
      // Only admins can delete or create users (creation is handled server-side, this prevents direct client creation)
      allow create, delete: if isAdmin();
    }
    
    // Allow admins to read all users for the admin panel
    match /users/{userId} {
        allow list: if isAdmin();
    }

    // Quizzes collection
    match /quizzes/{quizId} {
      // Any authenticated user can read quizzes
      allow get, list: if isSignedIn();
      // Only admins can create, update, or delete quizzes
      allow create, update, delete: if isAdmin();
    }

    // Documents collection
    match /documents/{docId} {
      // Any authenticated user can read documents
      allow get, list: if isSignedIn();
      // Only admins can create, update, or delete documents
      allow create, update, delete: if isAdmin();
    }
    
    // Training paths collection
    match /training_paths/{pathId} {
        allow get, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    // Attempts collection
    match /attempts/{attemptId} {
      // A user can create their own attempt
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // A user can read their own attempts
      allow read, list: if (isSignedIn() && request.auth.uid == resource.data.userId) || isAdmin();
      // No one can update or delete attempts
      allow update, delete: if false;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // User can read and update (to mark as read) their own notifications
      allow read, list, update: if isSignedIn() && resource.data.userId == request.auth.uid;
      // Only backend/admins can create notifications
      allow create: if isAdmin();
      // No one can delete notifications directly
      allow delete: if false;
    }

    // Default deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
